/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct AssemblyRefOSRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.AssemblyRefOS;

		public int Index;
		public UInt32 OSPlatformId;
		public UInt32 OSMajorVersion;
		public UInt32 OSMinorVersion;
		public AssemblyRefRowIndex AssemblyRef;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct AssemblyRefOSRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal AssemblyRefOSRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator AssemblyRefOSRowIndex(RowIndex rowIndex) {
			return new AssemblyRefOSRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(AssemblyRefOSRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class AssemblyRefOSRowFactory : RowFactory<AssemblyRefOSRow> {

		public AssemblyRefOSRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return AssemblyRefOSRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 4
				+ 4
				+ 4
				+ Heap.GetPhysicalSizeOfIndex(AssemblyRefRow.TableId)
				;
		}

		public override AssemblyRefOSRow Parse(byte[] buf, ref int position) {
			AssemblyRefOSRow value;
			value.Index = 0;
			value.OSPlatformId = Heap.ReadUInt32(buf, ref position);
			value.OSMajorVersion = Heap.ReadUInt32(buf, ref position);
			value.OSMinorVersion = Heap.ReadUInt32(buf, ref position);
			value.AssemblyRef = (AssemblyRefRowIndex)Heap.ReadRowIndex(AssemblyRefRow.TableId, buf, ref position);
			return value;
		}

	}

}
