/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct AssemblyRefRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.AssemblyRef;

		public int Index;
		public UInt16 MajorVersion;
		public UInt16 MinorVersion;
		public UInt16 BuildNumber;
		public UInt16 RevisionNumber;
		public AssemblyFlags Flags;
		public BlobHeapIndex PublicKeyOrToken;
		public StringHeapIndex Name;
		public StringHeapIndex Culture;
		public BlobHeapIndex HashValue;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct AssemblyRefRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal AssemblyRefRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator AssemblyRefRowIndex(RowIndex rowIndex) {
			return new AssemblyRefRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(AssemblyRefRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class AssemblyRefRowFactory : RowFactory<AssemblyRefRow> {

		public AssemblyRefRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return AssemblyRefRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 2
				+ 2
				+ 2
				+ 2
				+ 4
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.Blob)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.Blob)
				;
		}

		public override AssemblyRefRow Parse(byte[] buf, ref int position) {
			AssemblyRefRow value;
			value.Index = 0;
			value.MajorVersion = Heap.ReadUInt16(buf, ref position);
			value.MinorVersion = Heap.ReadUInt16(buf, ref position);
			value.BuildNumber = Heap.ReadUInt16(buf, ref position);
			value.RevisionNumber = Heap.ReadUInt16(buf, ref position);
			value.Flags = (AssemblyFlags)Heap.ReadEnum32(buf, ref position);
			value.PublicKeyOrToken = Heap.ReadBlobHeapIndex(buf, ref position);
			value.Name = Heap.ReadStringHeapIndex(buf, ref position);
			value.Culture = Heap.ReadStringHeapIndex(buf, ref position);
			value.HashValue = Heap.ReadBlobHeapIndex(buf, ref position);
			return value;
		}

	}

}
