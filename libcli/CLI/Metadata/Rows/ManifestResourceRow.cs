/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct ManifestResourceRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.ManifestResource;

		public int Index;
		public UInt32 Offset;
		public ManifestResourceAttributes Flags;
		public StringHeapIndex Name;
		public FileRowIndex Implementation;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct ManifestResourceRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal ManifestResourceRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator ManifestResourceRowIndex(RowIndex rowIndex) {
			return new ManifestResourceRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(ManifestResourceRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class ManifestResourceRowFactory : RowFactory<ManifestResourceRow> {

		public ManifestResourceRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return ManifestResourceRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 4
				+ 4
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(FileRow.TableId)
				;
		}

		public override ManifestResourceRow Parse(byte[] buf, ref int position) {
			ManifestResourceRow value;
			value.Index = 0;
			value.Offset = Heap.ReadUInt32(buf, ref position);
			value.Flags = (ManifestResourceAttributes)Heap.ReadEnum32(buf, ref position);
			value.Name = Heap.ReadStringHeapIndex(buf, ref position);
			value.Implementation = (FileRowIndex)Heap.ReadRowIndex(FileRow.TableId, buf, ref position);
			return value;
		}

	}

}
