/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct EventMapRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.EventMap;

		public int Index;
		public TypeDefRowIndex Parent;
		public EventRowIndex EventList;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct EventMapRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal EventMapRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator EventMapRowIndex(RowIndex rowIndex) {
			return new EventMapRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(EventMapRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class EventMapRowFactory : RowFactory<EventMapRow> {

		public EventMapRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return EventMapRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ Heap.GetPhysicalSizeOfIndex(TypeDefRow.TableId)
				+ Heap.GetPhysicalSizeOfIndex(EventRow.TableId)
				;
		}

		public override EventMapRow Parse(byte[] buf, ref int position) {
			EventMapRow value;
			value.Index = 0;
			value.Parent = (TypeDefRowIndex)Heap.ReadRowIndex(TypeDefRow.TableId, buf, ref position);
			value.EventList = (EventRowIndex)Heap.ReadRowIndex(EventRow.TableId, buf, ref position);
			return value;
		}

	}

}
