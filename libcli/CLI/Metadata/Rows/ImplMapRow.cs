/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct ImplMapRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.ImplMap;

		public int Index;
		public PInvokeAttributes MappingFlags;
		public MemberForwardedCodedIndex MemberForwarded;
		public StringHeapIndex ImportName;
		public ModuleRefRowIndex ImportScope;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct ImplMapRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal ImplMapRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator ImplMapRowIndex(RowIndex rowIndex) {
			return new ImplMapRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(ImplMapRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class ImplMapRowFactory : RowFactory<ImplMapRow> {

		public ImplMapRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return ImplMapRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 2
				+ Heap.GetPhysicalSizeOfIndex(CodedIndexes.MemberForwarded)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(ModuleRefRow.TableId)
				;
		}

		public override ImplMapRow Parse(byte[] buf, ref int position) {
			ImplMapRow value;
			value.Index = 0;
			value.MappingFlags = (PInvokeAttributes)Heap.ReadEnum16(buf, ref position);
			value.MemberForwarded = (MemberForwardedCodedIndex)Heap.ReadCodedIndex(CodedIndexes.MemberForwarded, buf, ref position);
			value.ImportName = Heap.ReadStringHeapIndex(buf, ref position);
			value.ImportScope = (ModuleRefRowIndex)Heap.ReadRowIndex(ModuleRefRow.TableId, buf, ref position);
			return value;
		}

	}

}
