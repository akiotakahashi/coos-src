/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct ModuleRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.Module;

		public int Index;
		public UInt16 Generation;
		public StringHeapIndex Name;
		public GuidHeapIndex Mvid;
		public GuidHeapIndex EncId;
		public GuidHeapIndex EncBaseId;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct ModuleRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal ModuleRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator ModuleRowIndex(RowIndex rowIndex) {
			return new ModuleRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(ModuleRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class ModuleRowFactory : RowFactory<ModuleRow> {

		public ModuleRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return ModuleRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 2
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.Guid)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.Guid)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.Guid)
				;
		}

		public override ModuleRow Parse(byte[] buf, ref int position) {
			ModuleRow value;
			value.Index = 0;
			value.Generation = Heap.ReadUInt16(buf, ref position);
			value.Name = Heap.ReadStringHeapIndex(buf, ref position);
			value.Mvid = Heap.ReadGuidHeapIndex(buf, ref position);
			value.EncId = Heap.ReadGuidHeapIndex(buf, ref position);
			value.EncBaseId = Heap.ReadGuidHeapIndex(buf, ref position);
			return value;
		}

	}

}
