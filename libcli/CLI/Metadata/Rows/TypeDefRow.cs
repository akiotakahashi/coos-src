/* This file is automatically generated by cliutil.exe */
using System;
using CooS.Formats.CLI.Metadata.Heaps;
using CooS.Formats.CLI.Metadata.Indexes;

namespace CooS.Formats.CLI.Metadata.Rows {

	public struct TypeDefRow : IRow {

		public const TableId TableId = CooS.Formats.CLI.Metadata.TableId.TypeDef;

		public int Index;
		public TypeAttributes Flags;
		public StringHeapIndex TypeName;
		public StringHeapIndex TypeNamespace;
		public TypeDefOrRefCodedIndex Extends;
		public FieldRowIndex FieldList;
		public MethodDefRowIndex MethodList;

		public int RowIndex {
			get {
				return this.Index;
			}
			set {
				this.Index = value;
			}
		}

	}

	public struct TypeDefRowIndex : IRowIndex {

		public readonly int Value;

		int IRowIndex.RawIndex {
			get {
				return this.Value;
			}
		}

		internal TypeDefRowIndex(int value) {
			this.Value = value;
		}

		public static explicit operator TypeDefRowIndex(RowIndex rowIndex) {
			return new TypeDefRowIndex(rowIndex.Value);
		}

		public static implicit operator RowIndex(TypeDefRowIndex rowIndex) {
			return new RowIndex(rowIndex.Value);
		}

	}

	internal class TypeDefRowFactory : RowFactory<TypeDefRow> {

		public TypeDefRowFactory(TablesHeap heap) : base(heap) {
		}

		public override TableId TableId { get { return TypeDefRow.TableId; } }

		public override int GetPhysicalSize() {
			return 0
				+ 4
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(HeapIndexes.String)
				+ Heap.GetPhysicalSizeOfIndex(CodedIndexes.TypeDefOrRef)
				+ Heap.GetPhysicalSizeOfIndex(FieldRow.TableId)
				+ Heap.GetPhysicalSizeOfIndex(MethodDefRow.TableId)
				;
		}

		public override TypeDefRow Parse(byte[] buf, ref int position) {
			TypeDefRow value;
			value.Index = 0;
			value.Flags = (TypeAttributes)Heap.ReadEnum32(buf, ref position);
			value.TypeName = Heap.ReadStringHeapIndex(buf, ref position);
			value.TypeNamespace = Heap.ReadStringHeapIndex(buf, ref position);
			value.Extends = (TypeDefOrRefCodedIndex)Heap.ReadCodedIndex(CodedIndexes.TypeDefOrRef, buf, ref position);
			value.FieldList = (FieldRowIndex)Heap.ReadRowIndex(FieldRow.TableId, buf, ref position);
			value.MethodList = (MethodDefRowIndex)Heap.ReadRowIndex(MethodDefRow.TableId, buf, ref position);
			return value;
		}

	}

}
