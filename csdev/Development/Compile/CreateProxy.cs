using System;
using System.Reflection;
using System.Collections.Generic;

namespace CooS.Development {
	
	class CreateProxy {

		private string[] args;

		public CreateProxy(string[] args) {
			this.args = args;
		}

		public int Execute() {
			Assembly assembly = Assembly.LoadFrom(args[1]);
			Type type = assembly.GetType(args[2]);
			Console.WriteLine("// This file is automatically generated by fdev.exe.");
			Console.WriteLine("// Don't edit this file manually.");
			Console.WriteLine();
			Console.WriteLine("using System;");
			Console.WriteLine();
			Console.WriteLine("namespace {0} {{", args[3].Substring(0, args[3].LastIndexOf('.')));
			Console.WriteLine();
			Console.WriteLine("public partial class {0} {{", args[3].Substring(args[3].LastIndexOf('.')+1));
			foreach(PropertyInfo property in type.GetProperties()) {
				if(!property.CanRead)
					continue;
				if(property.PropertyType.IsGenericType)
					continue;
				if(property.GetGetMethod().IsPublic) {
					string fullname;
					if(property.PropertyType.Namespace=="System") {
						fullname = property.PropertyType.Name;
					} else {
						fullname = property.PropertyType.FullName;
					}
					Console.WriteLine();
					Console.WriteLine("	public {0} {1} {{", fullname, property.Name);
					Console.WriteLine("		get {{ return this.Base.{0}; }}", property.Name);
					Console.WriteLine("	}");
				}
			}
			foreach(MethodInfo method in type.GetMethods()) {
				if(method.DeclaringType!=type)
					continue;
				if(method.IsSpecialName)
					continue;
				if(method.ReturnType.Name=="Void")
					continue;
				if(method.IsGenericMethod)
					continue;
				if(method.ReturnType.IsGenericType)
					continue;
				bool hasgenarg = false;
				foreach(ParameterInfo p in method.GetParameters()) {
					if(p.ParameterType.IsGenericType) {
						hasgenarg = true;
					}
				}
				if(hasgenarg) continue;
				if(method.IsPublic) {
					Console.WriteLine();
					Console.Write("	public {0} {1}(", method.ReturnType.FullName, method.Name);
					bool first = true;
					foreach(ParameterInfo p in method.GetParameters()) {
						if(!first) {
							Console.Write(", ");
							first = false;
						}
						Console.Write("{0} {1}", p.ParameterType.FullName, p.Name);
					}
					Console.WriteLine(")");
					Console.Write("	{{ return this.Base.{0}(", method.Name);
					first = true;
					foreach(ParameterInfo p in method.GetParameters()) {
						if(!first) {
							Console.Write(", ");
							first = false;
						}
						Console.Write("{0}", p.Name);
					}
					Console.WriteLine("); }");
				}
			}
			Console.WriteLine();
			Console.WriteLine("	}");
			Console.WriteLine();
			Console.WriteLine("}");
			return 0;
		}

	}

}
