#include "stdafx.h"

using namespace Reflection;


#define DECLARE(mnemonic) extern Reflection::Method* execute_ ## mnemonic(IL::ILMachine&, IL::Frame&, const byte*);

DECLARE(nop);
DECLARE(break);
DECLARE(ldarg_0);
DECLARE(ldarg_1);
DECLARE(ldarg_2);
DECLARE(ldarg_3);
DECLARE(ldloc_0);
DECLARE(ldloc_1);
DECLARE(ldloc_2);
DECLARE(ldloc_3);
DECLARE(stloc_0);
DECLARE(stloc_1);
DECLARE(stloc_2);
DECLARE(stloc_3);
DECLARE(ldarg_s);
DECLARE(ldarga_s);
DECLARE(starg_s);
DECLARE(ldloc_s);
DECLARE(ldloca_s);
DECLARE(stloc_s);
DECLARE(ldnull);
DECLARE(ldc_i4_m1);
DECLARE(ldc_i4_0);
DECLARE(ldc_i4_1);
DECLARE(ldc_i4_2);
DECLARE(ldc_i4_3);
DECLARE(ldc_i4_4);
DECLARE(ldc_i4_5);
DECLARE(ldc_i4_6);
DECLARE(ldc_i4_7);
DECLARE(ldc_i4_8);
DECLARE(ldc_i4_s);
DECLARE(ldc_i4);
DECLARE(ldc_i8);
DECLARE(ldc_r4);
DECLARE(ldc_r8);
DECLARE(dup);
DECLARE(pop);
DECLARE(jmp);
DECLARE(call);
DECLARE(calli);
DECLARE(ret);
DECLARE(br_s);
DECLARE(brfalse_s);
DECLARE(brtrue_s);
DECLARE(beq_s);
DECLARE(bge_s);
DECLARE(bgt_s);
DECLARE(ble_s);
DECLARE(blt_s);
DECLARE(bne_un_s);
DECLARE(bge_un_s);
DECLARE(bgt_un_s);
DECLARE(ble_un_s);
DECLARE(blt_un_s);
DECLARE(br);
DECLARE(brfalse);
DECLARE(brtrue);
DECLARE(beq);
DECLARE(bge);
DECLARE(bgt);
DECLARE(ble);
DECLARE(blt);
DECLARE(bne_un);
DECLARE(bge_un);
DECLARE(bgt_un);
DECLARE(ble_un);
DECLARE(blt_un);
DECLARE(switch);
DECLARE(ldind_i1);
DECLARE(ldind_u1);
DECLARE(ldind_i2);
DECLARE(ldind_u2);
DECLARE(ldind_i4);
DECLARE(ldind_u4);
DECLARE(ldind_i8);
DECLARE(ldind_i);
DECLARE(ldind_r4);
DECLARE(ldind_r8);
DECLARE(ldind_ref);
DECLARE(stind_ref);
DECLARE(stind_i1);
DECLARE(stind_i2);
DECLARE(stind_i4);
DECLARE(stind_i8);
DECLARE(stind_r4);
DECLARE(stind_r8);
DECLARE(add);
DECLARE(sub);
DECLARE(mul);
DECLARE(div);
DECLARE(div_un);
DECLARE(rem);
DECLARE(rem_un);
DECLARE(and);
DECLARE(or);
DECLARE(xor);
DECLARE(shl);
DECLARE(shr);
DECLARE(shr_un);
DECLARE(neg);
DECLARE(not);
DECLARE(conv_i1);
DECLARE(conv_i2);
DECLARE(conv_i4);
DECLARE(conv_i8);
DECLARE(conv_r4);
DECLARE(conv_r8);
DECLARE(conv_u4);
DECLARE(conv_u8);
DECLARE(callvirt);
DECLARE(cpobj);
DECLARE(ldobj);
DECLARE(ldstr);
DECLARE(newobj);
DECLARE(castclass);
DECLARE(isinst);
DECLARE(conv_r_un);
DECLARE(unbox);
DECLARE(throw);
DECLARE(ldfld);
DECLARE(ldflda);
DECLARE(stfld);
DECLARE(ldsfld);
DECLARE(ldsflda);
DECLARE(stsfld);
DECLARE(stobj);
DECLARE(conv_ovf_i1_un);
DECLARE(conv_ovf_i2_un);
DECLARE(conv_ovf_i4_un);
DECLARE(conv_ovf_i8_un);
DECLARE(conv_ovf_u1_un);
DECLARE(conv_ovf_u2_un);
DECLARE(conv_ovf_u4_un);
DECLARE(conv_ovf_u8_un);
DECLARE(conv_ovf_i_un);
DECLARE(conv_ovf_u_un);
DECLARE(box);
DECLARE(newarr);
DECLARE(ldlen);
DECLARE(ldelema);
DECLARE(ldelem_i1);
DECLARE(ldelem_u1);
DECLARE(ldelem_i2);
DECLARE(ldelem_u2);
DECLARE(ldelem_i4);
DECLARE(ldelem_u4);
DECLARE(ldelem_i8);
DECLARE(ldelem_i);
DECLARE(ldelem_r4);
DECLARE(ldelem_r8);
DECLARE(ldelem_ref);
DECLARE(stelem_i);
DECLARE(stelem_i1);
DECLARE(stelem_i2);
DECLARE(stelem_i4);
DECLARE(stelem_i8);
DECLARE(stelem_r4);
DECLARE(stelem_r8);
DECLARE(stelem_ref);
/*
DECLARE(ldelem);
DECLARE(stelem);
*/
DECLARE(unbox_any);
DECLARE(conv_ovf_i1);
DECLARE(conv_ovf_u1);
DECLARE(conv_ovf_i2);
DECLARE(conv_ovf_u2);
DECLARE(conv_ovf_i4);
DECLARE(conv_ovf_u4);
DECLARE(conv_ovf_i8);
DECLARE(conv_ovf_u8);
DECLARE(refanyval);
DECLARE(ckfinite);
DECLARE(mkrefany);
DECLARE(ldtoken);
DECLARE(conv_u2);
DECLARE(conv_u1);
DECLARE(conv_i);
DECLARE(conv_ovf_i);
DECLARE(conv_ovf_u);
DECLARE(add_ovf);
DECLARE(add_ovf_un);
DECLARE(mul_ovf);
DECLARE(mul_ovf_un);
DECLARE(sub_ovf);
DECLARE(sub_ovf_un);
DECLARE(endfinally);
DECLARE(leave);
DECLARE(leave_s);
DECLARE(stind_i);
DECLARE(conv_u);
DECLARE(prefix7);
DECLARE(prefix6);
DECLARE(prefix5);
DECLARE(prefix4);
DECLARE(prefix3);
DECLARE(prefix2);
DECLARE(prefix1);
DECLARE(prefixref);
DECLARE(arglist);
DECLARE(ceq);
DECLARE(cgt);
DECLARE(cgt_un);
DECLARE(clt);
DECLARE(clt_un);
DECLARE(ldftn);
DECLARE(ldvirtftn);
DECLARE(ldarg);
DECLARE(ldarga);
DECLARE(starg);
DECLARE(ldloc);
DECLARE(ldloca);
DECLARE(stloc);
DECLARE(localloc);
DECLARE(endfilter);
DECLARE(unaligned_);
DECLARE(volatile_);
DECLARE(tail_);
DECLARE(initobj);
DECLARE(constrained_);
DECLARE(cpblk);
DECLARE(initblk);
DECLARE(no_);
DECLARE(rethrow);
DECLARE(unused);
DECLARE(sizeof);
DECLARE(refanytype);
DECLARE(readonly_);

#include "stdafx.h"

extern void* pThreadHeap = NULL;

namespace IL {

	extern Method* (*dispatch00[256])(ILMachine&, Frame&, const byte*) = {};
	extern Method* (*dispatchFE[256])(ILMachine&, Frame&, const byte*) = {};

#define DISPATCH(disptbl, mnemonic) disptbl[IL_ ## mnemonic] = execute_ ## mnemonic;
#define DISPATCH2(disptbl, mnemonic) disptbl[(byte)(IL_ ## mnemonic)] = execute_ ## mnemonic;

	extern bool Initialize(void* baseaddress, uint size) {
		AssignMemory(baseaddress, size);
#if defined(WIN32)
		pThreadHeap = new byte[0x1000];
#else
		pThreadHeap = (void*)0x8000;
#endif
		memclr(pThreadHeap, 0x1000);
		DISPATCH(dispatch00, nop);
		DISPATCH(dispatch00, break);
		DISPATCH(dispatch00, ldarg_0);
		DISPATCH(dispatch00, ldarg_1);
		DISPATCH(dispatch00, ldarg_2);
		DISPATCH(dispatch00, ldarg_3);
		DISPATCH(dispatch00, ldloc_0);
		DISPATCH(dispatch00, ldloc_1);
		DISPATCH(dispatch00, ldloc_2);
		DISPATCH(dispatch00, ldloc_3);
		DISPATCH(dispatch00, stloc_0);
		DISPATCH(dispatch00, stloc_1);
		DISPATCH(dispatch00, stloc_2);
		DISPATCH(dispatch00, stloc_3);
		DISPATCH(dispatch00, ldarg_s);
		DISPATCH(dispatch00, ldarga_s);
		DISPATCH(dispatch00, starg_s);
		DISPATCH(dispatch00, ldloc_s);
		DISPATCH(dispatch00, ldloca_s);
		DISPATCH(dispatch00, stloc_s);
		DISPATCH(dispatch00, ldnull);
		DISPATCH(dispatch00, ldc_i4_m1);
		DISPATCH(dispatch00, ldc_i4_0);
		DISPATCH(dispatch00, ldc_i4_1);
		DISPATCH(dispatch00, ldc_i4_2);
		DISPATCH(dispatch00, ldc_i4_3);
		DISPATCH(dispatch00, ldc_i4_4);
		DISPATCH(dispatch00, ldc_i4_5);
		DISPATCH(dispatch00, ldc_i4_6);
		DISPATCH(dispatch00, ldc_i4_7);
		DISPATCH(dispatch00, ldc_i4_8);
		DISPATCH(dispatch00, ldc_i4_s);
		DISPATCH(dispatch00, ldc_i4);
		DISPATCH(dispatch00, ldc_i8);
		DISPATCH(dispatch00, ldc_r4);
		DISPATCH(dispatch00, ldc_r8);
		DISPATCH(dispatch00, dup);
		DISPATCH(dispatch00, pop);
		DISPATCH(dispatch00, jmp);
		DISPATCH(dispatch00, call);
		DISPATCH(dispatch00, calli);
//		DISPATCH(dispatch00, ret);
		DISPATCH(dispatch00, br_s);
		DISPATCH(dispatch00, brfalse_s);
		DISPATCH(dispatch00, brtrue_s);
		DISPATCH(dispatch00, beq_s);
		DISPATCH(dispatch00, bge_s);
		DISPATCH(dispatch00, bgt_s);
		DISPATCH(dispatch00, ble_s);
		DISPATCH(dispatch00, blt_s);
		DISPATCH(dispatch00, bne_un_s);
		DISPATCH(dispatch00, bge_un_s);
		DISPATCH(dispatch00, bgt_un_s);
		DISPATCH(dispatch00, ble_un_s);
		DISPATCH(dispatch00, blt_un_s);
		DISPATCH(dispatch00, br);
		DISPATCH(dispatch00, brfalse);
		DISPATCH(dispatch00, brtrue);
		DISPATCH(dispatch00, beq);
		DISPATCH(dispatch00, bge);
		DISPATCH(dispatch00, bgt);
		DISPATCH(dispatch00, ble);
		DISPATCH(dispatch00, blt);
		DISPATCH(dispatch00, bne_un);
		DISPATCH(dispatch00, bge_un);
		DISPATCH(dispatch00, bgt_un);
		DISPATCH(dispatch00, ble_un);
		DISPATCH(dispatch00, blt_un);
		DISPATCH(dispatch00, switch);
		DISPATCH(dispatch00, ldind_i1);
		DISPATCH(dispatch00, ldind_u1);
		DISPATCH(dispatch00, ldind_i2);
		DISPATCH(dispatch00, ldind_u2);
		DISPATCH(dispatch00, ldind_i4);
		DISPATCH(dispatch00, ldind_u4);
		DISPATCH(dispatch00, ldind_i8);
		DISPATCH(dispatch00, ldind_i);
		DISPATCH(dispatch00, ldind_r4);
		DISPATCH(dispatch00, ldind_r8);
		DISPATCH(dispatch00, ldind_ref);
		DISPATCH(dispatch00, stind_ref);
		DISPATCH(dispatch00, stind_i1);
		DISPATCH(dispatch00, stind_i2);
		DISPATCH(dispatch00, stind_i4);
		DISPATCH(dispatch00, stind_i8);
		DISPATCH(dispatch00, stind_r4);
		DISPATCH(dispatch00, stind_r8);
		DISPATCH(dispatch00, add);
		DISPATCH(dispatch00, sub);
		DISPATCH(dispatch00, mul);
		DISPATCH(dispatch00, div);
		DISPATCH(dispatch00, div_un);
		DISPATCH(dispatch00, rem);
		DISPATCH(dispatch00, rem_un);
		DISPATCH(dispatch00, and);
		DISPATCH(dispatch00, or);
		DISPATCH(dispatch00, xor);
		DISPATCH(dispatch00, shl);
		DISPATCH(dispatch00, shr);
		DISPATCH(dispatch00, shr_un);
		DISPATCH(dispatch00, neg);
		DISPATCH(dispatch00, not);
		DISPATCH(dispatch00, conv_i1);
		DISPATCH(dispatch00, conv_i2);
		DISPATCH(dispatch00, conv_i4);
		DISPATCH(dispatch00, conv_i8);
		DISPATCH(dispatch00, conv_r4);
		DISPATCH(dispatch00, conv_r8);
		DISPATCH(dispatch00, conv_u4);
		DISPATCH(dispatch00, conv_u8);
		DISPATCH(dispatch00, callvirt);
		DISPATCH(dispatch00, cpobj);
		DISPATCH(dispatch00, ldobj);
		DISPATCH(dispatch00, ldstr);
		DISPATCH(dispatch00, newobj);
		DISPATCH(dispatch00, castclass);
		DISPATCH(dispatch00, isinst);
		DISPATCH(dispatch00, conv_r_un);
		DISPATCH(dispatch00, unbox);
		DISPATCH(dispatch00, throw);
		DISPATCH(dispatch00, ldfld);
		DISPATCH(dispatch00, ldflda);
		DISPATCH(dispatch00, stfld);
		DISPATCH(dispatch00, ldsfld);
		DISPATCH(dispatch00, ldsflda);
		DISPATCH(dispatch00, stsfld);
		DISPATCH(dispatch00, stobj);
		DISPATCH(dispatch00, conv_ovf_i1_un);
		DISPATCH(dispatch00, conv_ovf_i2_un);
		DISPATCH(dispatch00, conv_ovf_i4_un);
		DISPATCH(dispatch00, conv_ovf_i8_un);
		DISPATCH(dispatch00, conv_ovf_u1_un);
		DISPATCH(dispatch00, conv_ovf_u2_un);
		DISPATCH(dispatch00, conv_ovf_u4_un);
		DISPATCH(dispatch00, conv_ovf_u8_un);
		DISPATCH(dispatch00, conv_ovf_i_un);
		DISPATCH(dispatch00, conv_ovf_u_un);
		DISPATCH(dispatch00, box);
		DISPATCH(dispatch00, newarr);
		DISPATCH(dispatch00, ldlen);
		DISPATCH(dispatch00, ldelema);
		DISPATCH(dispatch00, ldelem_i1);
		DISPATCH(dispatch00, ldelem_u1);
		DISPATCH(dispatch00, ldelem_i2);
		DISPATCH(dispatch00, ldelem_u2);
		DISPATCH(dispatch00, ldelem_i4);
		DISPATCH(dispatch00, ldelem_u4);
		DISPATCH(dispatch00, ldelem_i8);
		DISPATCH(dispatch00, ldelem_i);
		DISPATCH(dispatch00, ldelem_r4);
		DISPATCH(dispatch00, ldelem_r8);
		DISPATCH(dispatch00, ldelem_ref);
		DISPATCH(dispatch00, stelem_i);
		DISPATCH(dispatch00, stelem_i1);
		DISPATCH(dispatch00, stelem_i2);
		DISPATCH(dispatch00, stelem_i4);
		DISPATCH(dispatch00, stelem_i8);
		DISPATCH(dispatch00, stelem_r4);
		DISPATCH(dispatch00, stelem_r8);
		DISPATCH(dispatch00, stelem_ref);
		/*
		DISPATCH(dispatch00, ldelem);
		DISPATCH(dispatch00, stelem);
		*/
		DISPATCH(dispatch00, unbox_any);
		DISPATCH(dispatch00, conv_ovf_i1);
		DISPATCH(dispatch00, conv_ovf_u1);
		DISPATCH(dispatch00, conv_ovf_i2);
		DISPATCH(dispatch00, conv_ovf_u2);
		DISPATCH(dispatch00, conv_ovf_i4);
		DISPATCH(dispatch00, conv_ovf_u4);
		DISPATCH(dispatch00, conv_ovf_i8);
		DISPATCH(dispatch00, conv_ovf_u8);
		DISPATCH(dispatch00, refanyval);
		DISPATCH(dispatch00, ckfinite);
		DISPATCH(dispatch00, mkrefany);
		DISPATCH(dispatch00, ldtoken);
		DISPATCH(dispatch00, conv_u2);
		DISPATCH(dispatch00, conv_u1);
		DISPATCH(dispatch00, conv_i);
		DISPATCH(dispatch00, conv_ovf_i);
		DISPATCH(dispatch00, conv_ovf_u);
		DISPATCH(dispatch00, add_ovf);
		DISPATCH(dispatch00, add_ovf_un);
		DISPATCH(dispatch00, mul_ovf);
		DISPATCH(dispatch00, mul_ovf_un);
		DISPATCH(dispatch00, sub_ovf);
		DISPATCH(dispatch00, sub_ovf_un);
		DISPATCH(dispatch00, endfinally);
		DISPATCH(dispatch00, leave);
		DISPATCH(dispatch00, leave_s);
		DISPATCH(dispatch00, stind_i);
		DISPATCH(dispatch00, conv_u);
		/*
		DISPATCH(dispatch00, prefix7);
		DISPATCH(dispatch00, prefix6);
		DISPATCH(dispatch00, prefix5);
		DISPATCH(dispatch00, prefix4);
		DISPATCH(dispatch00, prefix3);
		DISPATCH(dispatch00, prefix2);
		*/
		DISPATCH(dispatch00, prefix1);
		DISPATCH(dispatch00, prefixref);
		DISPATCH2(dispatchFE, arglist);
		DISPATCH2(dispatchFE, ceq);
		DISPATCH2(dispatchFE, cgt);
		DISPATCH2(dispatchFE, cgt_un);
		DISPATCH2(dispatchFE, clt);
		DISPATCH2(dispatchFE, clt_un);
		DISPATCH2(dispatchFE, ldftn);
		DISPATCH2(dispatchFE, ldvirtftn);
		DISPATCH2(dispatchFE, ldarg);
		DISPATCH2(dispatchFE, ldarga);
		DISPATCH2(dispatchFE, starg);
		DISPATCH2(dispatchFE, ldloc);
		DISPATCH2(dispatchFE, ldloca);
		DISPATCH2(dispatchFE, stloc);
		DISPATCH2(dispatchFE, localloc);
		DISPATCH2(dispatchFE, endfilter);
		DISPATCH2(dispatchFE, unaligned_);
		DISPATCH2(dispatchFE, volatile_);
		DISPATCH2(dispatchFE, tail_);
		DISPATCH2(dispatchFE, initobj);
		DISPATCH2(dispatchFE, constrained_);
		DISPATCH2(dispatchFE, cpblk);
		DISPATCH2(dispatchFE, initblk);
		DISPATCH2(dispatchFE, no_);
		DISPATCH2(dispatchFE, rethrow);
		DISPATCH2(dispatchFE, sizeof);
		DISPATCH2(dispatchFE, refanytype);
		DISPATCH2(dispatchFE, readonly_);
		return true;
	}

}
